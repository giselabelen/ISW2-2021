// EJERCICIO 9

// original con deadlock

//PHIL = (sitdown->right.get->left.get
//->eat->left.put->right.put
//->arise->PHIL).

//FORK = (get -> put -> FORK).

//||DINERS(N=5)=
//forall [i:0..N-1]
//(phil[i]:PHIL
//||{phil[i].left,phil[((i-1)+N)%N].right}::FORK).



// solucion con asimetria
/*
PHIL(I=0) = (when (I%2==0)
sitdown->left.get->right.get
->eat->left.put->right.put->arise->PHIL
|when (I%2==1)
sitdown->right.get->left.get
->eat->right.put->left.put->arise->PHIL
).
FORK = (get -> put -> FORK).
||DINERS(N=5)=
forall [i:0..N-1]
(phil[i]:PHIL(i)
||{phil[i].left,phil[((i-1)+N)%N].right}::FORK).
*/



// solucion con control
/*
PHIL = (sitdown->right.get->left.get
->eat->left.put->right.put
->arise->PHIL).

FORK = (get -> put -> FORK).

const R = 5

CONTROL(M = R-1) = CONTROL[0],
CONTROL[i:0..M] = (when (i<1) phil[a:0..M].sitdown -> CONTROL[1]
				  |when(i>0) phil[a:0..M].arise->CONTROL[i-1]
				  |when(i>0 && i<M) phil[a:0..M].sitdown->CONTROL[i+1]).


||DINERS(N=5)=
forall [i:0..N-1]
(phil[i]:PHIL
||{phil[i].left,phil[((i-1)+N)%N].right}::FORK || CONTROL).
*/
